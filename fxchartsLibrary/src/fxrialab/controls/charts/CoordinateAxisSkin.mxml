<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		width="100%" height="100%">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("fxrialab.controls.charts.CoordinateAxis")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[	
			import flash.text.TextField;
				
			private var maxValue:Number;
			private var minValue:Number;
			private var numberLandMarkBelow:Number;
			private var numberLineLandMark:Number;
			private var widthChart:Number;
			private var heightChart:Number;

			override protected function updateDisplayList(w:Number, h:Number):void {
				super.updateDisplayList(w, h);
				
				maxValue = hostComponent.maxValue;
				minValue = hostComponent.minValue;
				numberLineLandMark = hostComponent.numberLineLandMarkDefault;
				
				numberLineLandMark = Math.ceil(h/40);
				
				numberLandMarkBelow = hostComponent.numberLineLandMarkForNegativeAxis;
				widthChart	= w - hostComponent.marginLeft - hostComponent.marginRight;
				heightChart = h - hostComponent.marginTop - hostComponent.marginBottom;
				
				//set text format for label field
				var horizontalFormat:TextFormat = new TextFormat();
				horizontalFormat.size = getStyle('sizeDefault');
				horizontalFormat.font = getStyle('fontDefault');
				horizontalFormat.align = getStyle('rightAlign');
				horizontalFormat.color = 0xA0A0A0;
				
				
				var verticalFormat:TextFormat = new TextFormat();
				verticalFormat.size = getStyle('sizeDefault');
				verticalFormat.font = getStyle('fontDefault');
				verticalFormat.align = getStyle('leftAlign');
				
				var titleFormat:TextFormat = new TextFormat();
				titleFormat.size = getStyle('titleSize');
				titleFormat.font = getStyle('titleFont');
				titleFormat.align = getStyle('alignDefault');
				
				var titleLabel:TextField = new TextField();
				titleLabel.text = String(hostComponent.title);
				
				titleLabel.setTextFormat(titleFormat);
				displayLabel.addChild(titleLabel);

				if (hostComponent.orientation == "horizontal") {
					//if negative values were existed with coordinate
					if(hostComponent.minValue){
						//position for title
						titleLabel.x = 0;
						titleLabel.y = 0;
						titleLabel.width = w;
						//============================================
						//draw coordinate for chart
						//============================================
						//draw horizontal axis
						graphics.clear();
						graphics.lineStyle(1, 0xDADADA);
					//	graphics.moveTo(hostComponent.marginLeft, h - hostComponent.marginBottom);
					//	graphics.lineTo(hostComponent.marginLeft, hostComponent.marginTop);
						//draw vertical axis
						graphics.moveTo(hostComponent.marginLeft-2, h - hostComponent.marginBottom - minValue*heightChart/(minValue + maxValue));
						graphics.lineTo(w - hostComponent.marginRight + 2, h - hostComponent.marginBottom - minValue*heightChart/(minValue + maxValue));
						//draw percent axis
					//	graphics.moveTo(w - hostComponent.marginRight, h - hostComponent.marginBottom);
					//	graphics.lineTo(w - hostComponent.marginRight, hostComponent.marginTop);
						
						//draw landmark gap for positive above section
						 for (var j:uint = 1; j <= numberLineLandMark; j++) {
							graphics.moveTo(hostComponent.marginLeft-2, h - hostComponent.marginBottom - ((maxValue*heightChart/(minValue + maxValue))/numberLineLandMark * j) - minValue*heightChart/(minValue + maxValue));
							graphics.lineTo(w - hostComponent.marginRight + 2, h - hostComponent.marginBottom - ((maxValue*heightChart/(minValue + maxValue))/numberLineLandMark * j) - minValue*heightChart/(minValue + maxValue));
						}
						//draw landmark gap for negative below section
						 for (j = 1; j <= numberLandMarkBelow; j++) {
							graphics.moveTo(hostComponent.marginLeft-2, h - hostComponent.marginBottom + ((minValue*heightChart/(minValue + maxValue))/numberLandMarkBelow * j) - minValue*heightChart/(minValue + maxValue));
							graphics.lineTo(w - hostComponent.marginRight + 2, h - hostComponent.marginBottom + ((minValue*heightChart/(minValue + maxValue))/numberLandMarkBelow * j) - minValue*heightChart/(minValue + maxValue));
						}   
						//============================================
						//draw label left value and right percent
						//============================================
						for (var k:int = 0; k <= numberLineLandMark; k++) {
							//Draw value label of horizontal axis with positive value
							var positiveAboveValue:TextField = new TextField();
							positiveAboveValue.text = String(Math.ceil(maxValue/numberLineLandMark * k));
							positiveAboveValue.x = - 7;
							positiveAboveValue.y = h - ((maxValue*heightChart/(minValue + maxValue))/numberLineLandMark * k) - minValue*heightChart/(minValue + maxValue) - hostComponent.marginBottom - 8;
							positiveAboveValue.width = 30;
							positiveAboveValue.setTextFormat(horizontalFormat);
							displayLabel.addChild(positiveAboveValue);
						}
						for (k= 1; k <= numberLandMarkBelow; k++) {
							//Draw value label of horizontal axis with negative value
							var negativeBelowValue:TextField = new TextField();
							negativeBelowValue.text = "-" + String(Math.ceil(minValue/numberLandMarkBelow * k));
							negativeBelowValue.x = -7;
							negativeBelowValue.y = h - hostComponent.marginBottom + ((minValue*heightChart/(minValue + maxValue))/numberLandMarkBelow * k) - minValue*heightChart/(minValue + maxValue) - 8;
							negativeBelowValue.width = 30;
							negativeBelowValue.setTextFormat(horizontalFormat);
							displayLabel.addChild(negativeBelowValue);
						}
					}else {
						//position for title
						titleLabel.x = 0;
						titleLabel.y = 0;
						titleLabel.width = w;
						//============================================
						//draw coordinate for chart
						//============================================
						//draw horizontal axis				
						//graphics.clear();
						graphics.lineStyle(1, 0xDADADA);
					//	graphics.moveTo(hostComponent.marginLeft, h - hostComponent.marginBottom);
					//	graphics.lineTo(hostComponent.marginLeft, hostComponent.marginTop);
						//draw vertical axis
						graphics.moveTo(hostComponent.marginLeft-2, h - hostComponent.marginBottom);
						graphics.lineTo(w - hostComponent.marginRight + 2, h - hostComponent.marginBottom);
						//draw percent axis
					//	graphics.moveTo(w - hostComponent.marginRight, h - hostComponent.marginBottom);
					//	graphics.lineTo(w - hostComponent.marginRight, hostComponent.marginTop);
						
						//draw landmark gap for coordinate axis
						for (j = 1; j <= numberLineLandMark; j++) {
							graphics.moveTo(hostComponent.marginLeft-2, h - hostComponent.marginBottom - (heightChart/numberLineLandMark * j));
							graphics.lineTo(w - hostComponent.marginRight + 2, h - hostComponent.marginBottom - (heightChart/numberLineLandMark * j));
						}
						//============================================
						//draw label left value and right percent
						//============================================
						for (k= 0; k <= numberLineLandMark; k++) {
							//Draw value label of axis
							var leftValue:TextField = new TextField();
							leftValue.text = String(Math.ceil(maxValue/numberLineLandMark * k));
							leftValue.x = - 7;
							leftValue.y = h - (heightChart/numberLineLandMark * k) - (hostComponent.marginBottom+8);
							leftValue.width = 30;
							leftValue.setTextFormat(horizontalFormat);
							displayLabel.addChild(leftValue);

							//Draw percent label of axis
							/* var rightPercent:TextField = new TextField();
							rightPercent.text = String(Math.ceil(100 / numberLineLandMark) * k) + "%";
							rightPercent.x = w - hostComponent.marginRight + 3;
							rightPercent.y = h - (maxValue/numberLineLandMark * k) - (hostComponent.marginBottom+5);
							rightPercent.wordWrap = true;
							
							rightPercent.setTextFormat(verticalFormat);
							displayLabel.addChild(rightPercent); */
						}
					}
					
				}else {
					if(hostComponent.minValue) {
						//position for title
						titleLabel.x = 0;
						titleLabel.y = 0;
						titleLabel.width = w;
						//============================================
						//draw coordinate for chart
						//============================================
						graphics.clear();
						graphics.lineStyle(1, 0xDADADA);
						//draw vertical axis
					//	graphics.moveTo(1 + hostComponent.marginLeft, hostComponent.marginTop);
					//	graphics.lineTo(1 + hostComponent.marginLeft + widthChart, hostComponent.marginTop);
						//draw horizontal axis
						graphics.moveTo(1 + hostComponent.marginLeft + minValue*widthChart/(minValue + maxValue), hostComponent.marginTop);
						graphics.lineTo(1 + hostComponent.marginLeft + minValue*widthChart/(minValue + maxValue), h - hostComponent.marginBottom + 2);
						//draw value axis
					//	graphics.moveTo(1 + hostComponent.marginLeft, h - hostComponent.marginBottom);
					//	graphics.lineTo(1 + hostComponent.marginLeft + widthChart, h - hostComponent.marginBottom);

						//draw landmark gap for positive right section
						for (j= 1; j <= numberLineLandMark; j++) {
							graphics.moveTo(1 + hostComponent.marginLeft + ((maxValue*widthChart/(minValue + maxValue))/numberLineLandMark * j) + minValue*widthChart/(minValue + maxValue), hostComponent.marginTop);
							graphics.lineTo(1 + hostComponent.marginLeft + ((maxValue*widthChart/(minValue + maxValue))/numberLineLandMark * j) + minValue*widthChart/(minValue + maxValue), h - hostComponent.marginBottom + 2);
						}
						//draw landmark gap for negative left section
						for (j = 1; j <= numberLandMarkBelow; j++) {
							graphics.moveTo(1 + hostComponent.marginLeft - ((minValue*widthChart/(minValue + maxValue))/numberLandMarkBelow * j) + minValue*widthChart/(minValue + maxValue), hostComponent.marginTop);
							graphics.lineTo(1 + hostComponent.marginLeft - ((minValue*widthChart/(minValue + maxValue))/numberLandMarkBelow * j) + minValue*widthChart/(minValue + maxValue), h - hostComponent.marginBottom + 2);
						}
						//============================================
						//draw label left value and right percent
						//============================================
						for (k = 0; k <= numberLineLandMark; k++) {
							/* var topPercent:TextField = new TextField();
							topPercent.text = String(Math.ceil(100 / numberLineLandMark) * k) + "%";
							topPercent.x = marginLeft + (sumValue/numberLineLandMark * k) - 3;
							topPercent.y = marginTop - 10;
							
							topPercent.setTextFormat(verticalFormat);
							displayLabel.addChild(topPercent); */
							
							var positiveRightValue:TextField = new TextField();
							positiveRightValue.text = String(Math.ceil(maxValue/numberLineLandMark * k));
							positiveRightValue.x = hostComponent.marginLeft + ((maxValue*widthChart/(minValue + maxValue))/numberLineLandMark * k) - 3 + minValue*widthChart/(minValue + maxValue);
							positiveRightValue.y = h - hostComponent.marginBottom + 2;
							
							positiveRightValue.setTextFormat(verticalFormat);
							displayLabel.addChild(positiveRightValue);
						}
						for (k = 0; k <= numberLandMarkBelow; k++) {
							var negativeLeftValue:TextField = new TextField();
							negativeLeftValue.text = String(Math.ceil(minValue/numberLandMarkBelow * k));
							negativeLeftValue.x = hostComponent.marginLeft - ((minValue*widthChart/(minValue + maxValue))/numberLandMarkBelow * k) - 3 + minValue*widthChart/(minValue + maxValue);
							negativeLeftValue.y = h - hostComponent.marginBottom + 2;
							
							negativeLeftValue.setTextFormat(verticalFormat);
							displayLabel.addChild(negativeLeftValue);
						}
					}else {
						//position for title
						titleLabel.x = 0;
						titleLabel.y = 0;
						titleLabel.width = w;
						//draw
						graphics.clear();
						graphics.lineStyle(1, 0xDADADA);
						//draw vertical axis
					//	graphics.moveTo(1 + hostComponent.marginLeft, hostComponent.marginTop);
					//	graphics.lineTo(1 + hostComponent.marginLeft + widthChart, hostComponent.marginTop);
						//draw horizontal axis
						graphics.moveTo(1 + hostComponent.marginLeft, hostComponent.marginTop);
						graphics.lineTo(1 + hostComponent.marginLeft, h - hostComponent.marginBottom + 2);
						//draw value axis
					//	graphics.moveTo(1 + hostComponent.marginLeft, h - hostComponent.marginBottom);
					//	graphics.lineTo(1 + hostComponent.marginLeft + widthChart, h - hostComponent.marginBottom);
						//draw landmark gap for coordinate axis
						for (j= 1; j <= numberLineLandMark; j++) {
							graphics.moveTo(1 + hostComponent.marginLeft + (widthChart/numberLineLandMark * j), hostComponent.marginTop);
							graphics.lineTo(1 + hostComponent.marginLeft + (widthChart/numberLineLandMark * j), h - hostComponent.marginBottom + 2);
						}
						
						//============================================
						//draw label left value and right percent
						//============================================
						for (k = 0; k <= numberLineLandMark; k++) {
							/* var topPercent:TextField = new TextField();
							topPercent.text = String(Math.ceil(100 / numberLineLandMark) * k) + "%";
							topPercent.x = marginLeft + (sumValue/numberLineLandMark * k) - 3;
							topPercent.y = marginTop - 10;
							
							topPercent.setTextFormat(verticalFormat);
							displayLabel.addChild(topPercent); */
							
							var bottomValue:TextField = new TextField();
							bottomValue.text = String(Math.ceil(maxValue/numberLineLandMark * k));
							bottomValue.x = hostComponent.marginLeft + (widthChart/numberLineLandMark * k) - 3;
							bottomValue.y = h - hostComponent.marginBottom + 2;
							
							bottomValue.setTextFormat(verticalFormat);
							displayLabel.addChild(bottomValue);
						}
					}
				}
			}
		]]>
	</fx:Script>
	<mx:UIComponent id="displayLabel" />
</s:Skin>
