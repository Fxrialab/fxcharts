<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("fxrialab.controls.charts.LineChart")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				var yLineTo:int;
				var getValueForLineTo:Object;
				
				//draw line
				var getFirstValue:Number = hostComponent.dataProvider.getItemAt(0)[hostComponent.data.valueField];
				graphics.lineStyle(1.5, hostComponent.stroke);
				if (hostComponent.direction == "horizontal") {
					var xMoveHorizontal:Number;
					if(hostComponent.minValue) {
						graphics.moveTo(hostComponent.marginLeft + hostComponent.data.offSet + hostComponent.barWidth - hostComponent.barWidth / 2, hostComponent.data.height - hostComponent.marginBottom - getFirstValue - hostComponent.minValue);
						
						for (var k:int = 0; k < hostComponent.dataProvider.length - 1; k++) {
							getValueForLineTo= hostComponent.dataProvider.getItemAt(k+1);
							yLineTo = getValueForLineTo[hostComponent.data.valueField];
							xMoveHorizontal = hostComponent.marginLeft + hostComponent.data.offSet + hostComponent.data.gap * k + hostComponent.barWidth * k + hostComponent.barWidth / 2;
							
							graphics.lineTo(xMoveHorizontal + hostComponent.barWidth + hostComponent.data.gap, hostComponent.data.height - hostComponent.data.marginBottom - yLineTo -hostComponent.minValue);
						}
					}else {
						graphics.moveTo(hostComponent.marginLeft + hostComponent.data.offSet + hostComponent.barWidth - hostComponent.barWidth / 2, hostComponent.data.height - hostComponent.marginBottom - getFirstValue);
						
						for (k = 0; k < hostComponent.dataProvider.length - 1; k++) {
							getValueForLineTo= hostComponent.dataProvider.getItemAt(k+1);
							yLineTo = getValueForLineTo[hostComponent.data.valueField];
							xMoveHorizontal = hostComponent.marginLeft + hostComponent.data.offSet + hostComponent.data.gap * k + hostComponent.barWidth * k + hostComponent.barWidth / 2;
							
							graphics.lineTo(xMoveHorizontal + hostComponent.barWidth + hostComponent.data.gap, hostComponent.data.height - hostComponent.data.marginBottom - yLineTo);
						}
					}
				}else {
					var yyMove:Number;
					if(hostComponent.minValue) {
						graphics.moveTo(hostComponent.marginLeft + getFirstValue + hostComponent.minValue, hostComponent.data.height - (hostComponent.marginBottom + hostComponent.data.offSet + hostComponent.barHeight/2));
						
						for (k= 0; k < hostComponent.dataProvider.length - 1; k++) {
							getValueForLineTo= hostComponent.dataProvider.getItemAt(k+1);
							yLineTo = getValueForLineTo[hostComponent.data.valueField];
							yyMove = hostComponent.data.height - (hostComponent.data.gap*k + hostComponent.barHeight*k + hostComponent.marginBottom + hostComponent.data.offSet + hostComponent.barHeight/2);
							
							graphics.lineTo(hostComponent.marginLeft + yLineTo + hostComponent.minValue, yyMove - hostComponent.barHeight - hostComponent.data.gap);
						}
					}else {
						graphics.moveTo(hostComponent.marginLeft + getFirstValue, hostComponent.data.height - (hostComponent.marginBottom + hostComponent.data.offSet + hostComponent.barHeight/2));
						
						for (k= 0; k < hostComponent.dataProvider.length - 1; k++) {
							getValueForLineTo= hostComponent.dataProvider.getItemAt(k+1);
							yLineTo = getValueForLineTo[hostComponent.data.valueField];
							yyMove = hostComponent.data.height - (hostComponent.data.gap*k + hostComponent.barHeight*k + hostComponent.marginBottom + hostComponent.data.offSet + hostComponent.barHeight/2);
							
							graphics.lineTo(hostComponent.marginLeft + yLineTo, yyMove - hostComponent.barHeight - hostComponent.data.gap);
						}
					}
				}

			}
		]]>
	</fx:Script>
	
	<mx:UIComponent id="lineHolder" />
	
</s:Skin>
